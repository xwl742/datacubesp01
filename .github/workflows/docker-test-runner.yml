name: Docker (test runner)

on:
  pull_request:
    paths:
      - 'docker/**'
      - '.github/workflows/docker-test-runner.yml'
      - 'setup.py'
      - 'setup.cfg'
      - 'check-code.sh'

  push:
    paths:
      - 'docker/**'
      - '.github/workflows/docker-test-runner.yml'
      - 'setup.py'
      - 'setup.cfg'
      - 'check-code.sh'

env:
  ORG: opendatacube
  IMAGE: datacube_sp-tests
  DOCKER_USER: gadockersvc


jobs:
  docker:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 0

    - name: Config
      id: cfg
      run: |
        echo "docker_image=${ORG}/${IMAGE}:latest" >> $GITHUB_OUTPUT

    # This is the a separate action that sets up buildx runner
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: pat-s/always-upload-cache@v2.1.5
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build Docker
      uses: docker/build-push-action@v2
      with:
        file: docker/Dockerfile
        context: .
        tags: ${{ steps.cfg.outputs.docker_image }}
        outputs: type=docker
        build-args: |
          V_BASE=3.3.0
          V_PG=14
        cache-from: |
          type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new

    # This ugly bit is necessary if you don't want your cache to grow forever
    # till it hits GitHub's limit of 5GB.
    # Temp fix
    # https://github.com/docker/build-push-action/issues/252
    # https://github.com/moby/buildkit/issues/1896
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Verify Docker Image
      run: |
        # Make sure we test docker image we built
        if [[ "${{ steps.cfg.outputs.docker_image }}" != "opendatacube/datacube-tests:latest" ]]; then
            docker tag "${{ steps.cfg.outputs.docker_image }}" opendatacube/datacube-tests:latest
        fi

        ./check-code.sh --with-docker integration_tests

        echo "Verify that twine is installed"
        docker run --rm opendatacube/datacube-tests:latest twine --version

    - name: DockerHub Login
      id: dkr
      if: |
        github.event_name == 'push' && (
          github.ref == 'refs/heads/develop'
          )
      run: |
        if [ -n "${{ secrets.DockerPassword }}" ]; then
           echo "Login to DockerHub as ${DOCKER_USER}"
           echo "${{ secrets.DockerPassword }}" | docker login -u "${DOCKER_USER}" --password-stdin
           echo "logged_in=yes" >> $GITHUB_OUTPUT
        else
           echo "Set DockerPassword secret to push to docker"
        fi

    - name: DockerHub Push
      if: |
        github.event_name == 'push' && (
          github.ref == 'refs/heads/develop'
          ) && steps.dkr.outputs.logged_in == 'yes'
      run: |
        if [ -n "${{ secrets.DockerPassword }}" ]; then
           docker push "${{ steps.cfg.outputs.docker_image }}"
        fi
