#!/bin/bash

launch_db () {
    local pgdata="${1:-/srv/postgresql}"
    local dbuser="${2:-odc}"
    local bin=$(find /usr/lib/postgresql/ -type d -name bin)

    [ -e "${pgdata}/PG_VERSION" ] || {
        sudo -u postgres "${bin}/initdb" -D "${pgdata}" --auth-host=md5 --encoding=UTF8
    }

    sudo -u postgres "${bin}/pg_ctl" -D "${pgdata}" -l "${pgdata}/pg.log" start

    sudo -u postgres createuser --superuser "${dbuser}"
    sudo -u postgres createdb "${dbuser}"
    sudo -u postgres createdb datacube
    sudo -u postgres createdb agdcintegration
    sudo -u postgres createdb odcintegration
}

# Become `odc` user with UID/GID compatible to datacube_sp-core volume
#  If Running As root
#    launch db server
#    If outside volume not owned by root
#       change `odc` to have compatible UID/GID
#       re-exec this script as odc user

[[ $UID -ne 0 ]] || {
    [[ "${SKIP_DB:-no}" == "yes" ]] || {
        launch_db /srv/postgresql odc > /dev/null 2> /dev/null || {
            echo "WARNING: Failed to launch db, integration tests might not run"
        }
    }

    target_uid=$(stat -c '%u' .)
    target_gid=$(stat -c '%g' .)

    [[ $target_uid -eq 0 ]] || {

        # unless gid already matches update gid
        [[ $(id -g odc) -eq ${target_gid} ]] || {
            groupmod --gid ${target_gid} odc
            usermod --gid ${target_gid} odc
        }

        # unless uid already matches: change it and update HOME and /env
        [[ $(id -u odc) -eq ${target_uid} ]] || {
            usermod --uid ${target_uid} odc
            chown -R odc:odc /home/odc/ /env
        }

        exec sudo -u odc -E -H bash "$0" "$@"
    }
}

[[ $UID -ne 0 ]] || echo "WARNING: Running as root"

cat <<EOL > $HOME/.datacube_integration.conf
[datacube]
db_hostname:
db_database: agdcintegration
index_driver: default

[experimental]
db_hostname:
db_database: odcintegration
index_driver: postgis

[no_such_driver_env]
db_hostname:
index_driver: no_such_driver

[null_driver]
index_driver: null

EOL

env="${PYENV:-/env}"

if [ -e "${env}/bin/activate" ]; then
    [ -n "${VIRTUAL_ENV:-}" ] || {
        source "${env}/bin/activate"

        # if there is no .egg-info then we need to install in
        # edit mode again to generate it, needed for plugin registration
        [[ -e /code/datacube.egg-info ]] || {
            python -m pip install -e /code --no-deps
            python -m pip install -e /code/tests/drivers/fail_drivers --no-deps
            python -m pip install -e /code/examples/io_plugin --no-deps
        }

        [ -n "${GDAL_DATA:-}" ] || {
            # if binary version of rasterio was used, set GDAL_DATA to that
            RIO_GDAL_DATA=$(dirname $(python -c 'import rasterio; print(rasterio.__file__)'))"/gdal_data"

            if [ -d "${RIO_GDAL_DATA}" ]; then
                export GDAL_DATA="${RIO_GDAL_DATA}"
            else
                export GDAL_DATA=$(gdal-config --datadir)
            fi
        }
    }
fi

[ -z "${1:-}" ] || {
    exec "$@"
}
